/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IMarketRegistry {
  export type MarketInfoStruct = {
    pool: PromiseOrValue<string>;
    exchangeFeeRatio: PromiseOrValue<BigNumberish>;
    uniswapFeeRatio: PromiseOrValue<BigNumberish>;
    insuranceFundFeeRatio: PromiseOrValue<BigNumberish>;
  };

  export type MarketInfoStructOutput = [string, number, number, number] & {
    pool: string;
    exchangeFeeRatio: number;
    uniswapFeeRatio: number;
    insuranceFundFeeRatio: number;
  };
}

export interface IMarketRegistryInterface extends utils.Interface {
  functions: {
    "addPool(address,uint24)": FunctionFragment;
    "getFeeRatio(address)": FunctionFragment;
    "getInsuranceFundFeeRatio(address)": FunctionFragment;
    "getMarketInfo(address)": FunctionFragment;
    "getMaxOrdersPerMarket()": FunctionFragment;
    "getPool(address)": FunctionFragment;
    "getQuoteToken()": FunctionFragment;
    "getUniswapV3Factory()": FunctionFragment;
    "hasPool(address)": FunctionFragment;
    "setFeeRatio(address,uint24)": FunctionFragment;
    "setInsuranceFundFeeRatio(address,uint24)": FunctionFragment;
    "setMaxOrdersPerMarket(uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPool"
      | "getFeeRatio"
      | "getInsuranceFundFeeRatio"
      | "getMarketInfo"
      | "getMaxOrdersPerMarket"
      | "getPool"
      | "getQuoteToken"
      | "getUniswapV3Factory"
      | "hasPool"
      | "setFeeRatio"
      | "setInsuranceFundFeeRatio"
      | "setMaxOrdersPerMarket"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPool",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeRatio",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInsuranceFundFeeRatio",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxOrdersPerMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV3Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRatio",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInsuranceFundFeeRatio",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxOrdersPerMarket",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInsuranceFundFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxOrdersPerMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV3Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInsuranceFundFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxOrdersPerMarket",
    data: BytesLike
  ): Result;

  events: {
    "FeeRatioChanged(address,uint24)": EventFragment;
    "InsuranceFundFeeRatioChanged(address,uint24)": EventFragment;
    "MaxOrdersPerMarketChanged(uint8)": EventFragment;
    "PoolAdded(address,uint24,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeRatioChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InsuranceFundFeeRatioChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxOrdersPerMarketChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
}

export interface FeeRatioChangedEventObject {
  baseToken: string;
  feeRatio: number;
}
export type FeeRatioChangedEvent = TypedEvent<
  [string, number],
  FeeRatioChangedEventObject
>;

export type FeeRatioChangedEventFilter = TypedEventFilter<FeeRatioChangedEvent>;

export interface InsuranceFundFeeRatioChangedEventObject {
  baseToken: string;
  feeRatio: number;
}
export type InsuranceFundFeeRatioChangedEvent = TypedEvent<
  [string, number],
  InsuranceFundFeeRatioChangedEventObject
>;

export type InsuranceFundFeeRatioChangedEventFilter =
  TypedEventFilter<InsuranceFundFeeRatioChangedEvent>;

export interface MaxOrdersPerMarketChangedEventObject {
  maxOrdersPerMarket: number;
}
export type MaxOrdersPerMarketChangedEvent = TypedEvent<
  [number],
  MaxOrdersPerMarketChangedEventObject
>;

export type MaxOrdersPerMarketChangedEventFilter =
  TypedEventFilter<MaxOrdersPerMarketChangedEvent>;

export interface PoolAddedEventObject {
  baseToken: string;
  feeRatio: number;
  pool: string;
}
export type PoolAddedEvent = TypedEvent<
  [string, number, string],
  PoolAddedEventObject
>;

export type PoolAddedEventFilter = TypedEventFilter<PoolAddedEvent>;

export interface IMarketRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMarketRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPool(
      baseToken: PromiseOrValue<string>,
      feeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getFeeRatio(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number] & { feeRatio: number }>;

    getInsuranceFundFeeRatio(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number] & { feeRatio: number }>;

    getMarketInfo(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IMarketRegistry.MarketInfoStructOutput] & {
        info: IMarketRegistry.MarketInfoStructOutput;
      }
    >;

    getMaxOrdersPerMarket(
      overrides?: CallOverrides
    ): Promise<[number] & { maxOrdersPerMarket: number }>;

    getPool(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { pool: string }>;

    getQuoteToken(
      overrides?: CallOverrides
    ): Promise<[string] & { quoteToken: string }>;

    getUniswapV3Factory(
      overrides?: CallOverrides
    ): Promise<[string] & { factory: string }>;

    hasPool(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { hasPool: boolean }>;

    setFeeRatio(
      baseToken: PromiseOrValue<string>,
      feeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInsuranceFundFeeRatio(
      baseToken: PromiseOrValue<string>,
      insuranceFundFeeRatioArg: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxOrdersPerMarket(
      maxOrdersPerMarketArg: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addPool(
    baseToken: PromiseOrValue<string>,
    feeRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getFeeRatio(
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getInsuranceFundFeeRatio(
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getMarketInfo(
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IMarketRegistry.MarketInfoStructOutput>;

  getMaxOrdersPerMarket(overrides?: CallOverrides): Promise<number>;

  getPool(
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getQuoteToken(overrides?: CallOverrides): Promise<string>;

  getUniswapV3Factory(overrides?: CallOverrides): Promise<string>;

  hasPool(
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setFeeRatio(
    baseToken: PromiseOrValue<string>,
    feeRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInsuranceFundFeeRatio(
    baseToken: PromiseOrValue<string>,
    insuranceFundFeeRatioArg: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxOrdersPerMarket(
    maxOrdersPerMarketArg: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPool(
      baseToken: PromiseOrValue<string>,
      feeRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getFeeRatio(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getInsuranceFundFeeRatio(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getMarketInfo(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IMarketRegistry.MarketInfoStructOutput>;

    getMaxOrdersPerMarket(overrides?: CallOverrides): Promise<number>;

    getPool(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getQuoteToken(overrides?: CallOverrides): Promise<string>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<string>;

    hasPool(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setFeeRatio(
      baseToken: PromiseOrValue<string>,
      feeRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInsuranceFundFeeRatio(
      baseToken: PromiseOrValue<string>,
      insuranceFundFeeRatioArg: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxOrdersPerMarket(
      maxOrdersPerMarketArg: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeRatioChanged(address,uint24)"(
      baseToken?: null,
      feeRatio?: null
    ): FeeRatioChangedEventFilter;
    FeeRatioChanged(
      baseToken?: null,
      feeRatio?: null
    ): FeeRatioChangedEventFilter;

    "InsuranceFundFeeRatioChanged(address,uint24)"(
      baseToken?: null,
      feeRatio?: null
    ): InsuranceFundFeeRatioChangedEventFilter;
    InsuranceFundFeeRatioChanged(
      baseToken?: null,
      feeRatio?: null
    ): InsuranceFundFeeRatioChangedEventFilter;

    "MaxOrdersPerMarketChanged(uint8)"(
      maxOrdersPerMarket?: null
    ): MaxOrdersPerMarketChangedEventFilter;
    MaxOrdersPerMarketChanged(
      maxOrdersPerMarket?: null
    ): MaxOrdersPerMarketChangedEventFilter;

    "PoolAdded(address,uint24,address)"(
      baseToken?: PromiseOrValue<string> | null,
      feeRatio?: PromiseOrValue<BigNumberish> | null,
      pool?: PromiseOrValue<string> | null
    ): PoolAddedEventFilter;
    PoolAdded(
      baseToken?: PromiseOrValue<string> | null,
      feeRatio?: PromiseOrValue<BigNumberish> | null,
      pool?: PromiseOrValue<string> | null
    ): PoolAddedEventFilter;
  };

  estimateGas: {
    addPool(
      baseToken: PromiseOrValue<string>,
      feeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getFeeRatio(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInsuranceFundFeeRatio(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInfo(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxOrdersPerMarket(overrides?: CallOverrides): Promise<BigNumber>;

    getPool(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<BigNumber>;

    hasPool(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFeeRatio(
      baseToken: PromiseOrValue<string>,
      feeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInsuranceFundFeeRatio(
      baseToken: PromiseOrValue<string>,
      insuranceFundFeeRatioArg: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxOrdersPerMarket(
      maxOrdersPerMarketArg: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPool(
      baseToken: PromiseOrValue<string>,
      feeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getFeeRatio(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInsuranceFundFeeRatio(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketInfo(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxOrdersPerMarket(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPool(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUniswapV3Factory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPool(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeRatio(
      baseToken: PromiseOrValue<string>,
      feeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInsuranceFundFeeRatio(
      baseToken: PromiseOrValue<string>,
      insuranceFundFeeRatioArg: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxOrdersPerMarket(
      maxOrdersPerMarketArg: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
