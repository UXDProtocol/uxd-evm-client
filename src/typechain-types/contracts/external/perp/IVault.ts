/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IVaultInterface extends utils.Interface {
  functions: {
    "decimals()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "depositEther()": FunctionFragment;
    "depositEtherFor(address)": FunctionFragment;
    "depositFor(address,address,uint256)": FunctionFragment;
    "getAccountBalance()": FunctionFragment;
    "getAccountValue(address)": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getBalanceByToken(address,address)": FunctionFragment;
    "getClearingHouse()": FunctionFragment;
    "getClearingHouseConfig()": FunctionFragment;
    "getCollateralManager()": FunctionFragment;
    "getCollateralMmRatio()": FunctionFragment;
    "getCollateralTokens(address)": FunctionFragment;
    "getExchange()": FunctionFragment;
    "getFreeCollateral(address)": FunctionFragment;
    "getFreeCollateralByRatio(address,uint24)": FunctionFragment;
    "getFreeCollateralByToken(address,address)": FunctionFragment;
    "getInsuranceFund()": FunctionFragment;
    "getLiquidatableCollateralBySettlement(address,uint256)": FunctionFragment;
    "getMarginRequirementForCollateralLiquidation(address)": FunctionFragment;
    "getMaxRepaidSettlementAndLiquidatableCollateral(address,address)": FunctionFragment;
    "getRepaidSettlementByCollateral(address,uint256)": FunctionFragment;
    "getSettlementToken()": FunctionFragment;
    "getSettlementTokenValue(address)": FunctionFragment;
    "getTotalDebt()": FunctionFragment;
    "getWETH9()": FunctionFragment;
    "isLiquidatable(address)": FunctionFragment;
    "liquidateCollateral(address,address,uint256,bool)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawEther(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "decimals"
      | "deposit"
      | "depositEther"
      | "depositEtherFor"
      | "depositFor"
      | "getAccountBalance"
      | "getAccountValue"
      | "getBalance"
      | "getBalanceByToken"
      | "getClearingHouse"
      | "getClearingHouseConfig"
      | "getCollateralManager"
      | "getCollateralMmRatio"
      | "getCollateralTokens"
      | "getExchange"
      | "getFreeCollateral"
      | "getFreeCollateralByRatio"
      | "getFreeCollateralByToken"
      | "getInsuranceFund"
      | "getLiquidatableCollateralBySettlement"
      | "getMarginRequirementForCollateralLiquidation"
      | "getMaxRepaidSettlementAndLiquidatableCollateral"
      | "getRepaidSettlementByCollateral"
      | "getSettlementToken"
      | "getSettlementTokenValue"
      | "getTotalDebt"
      | "getWETH9"
      | "isLiquidatable"
      | "liquidateCollateral"
      | "withdraw"
      | "withdrawEther"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEther",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositEtherFor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceByToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearingHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClearingHouseConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralMmRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFreeCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFreeCollateralByRatio",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFreeCollateralByToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInsuranceFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidatableCollateralBySettlement",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginRequirementForCollateralLiquidation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxRepaidSettlementAndLiquidatableCollateral",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRepaidSettlementByCollateral",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementTokenValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getWETH9", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isLiquidatable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositEtherFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralMmRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreeCollateralByRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreeCollateralByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidatableCollateralBySettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginRequirementForCollateralLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxRepaidSettlementAndLiquidatableCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepaidSettlementByCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementTokenValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWETH9", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;

  events: {
    "ClearingHouseChanged(address)": EventFragment;
    "CollateralLiquidated(address,address,address,uint256,uint256,uint256,uint24)": EventFragment;
    "CollateralManagerChanged(address)": EventFragment;
    "Deposited(address,address,uint256)": EventFragment;
    "TrustedForwarderChanged(address)": EventFragment;
    "WETH9Changed(address)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClearingHouseChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedForwarderChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WETH9Changed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface ClearingHouseChangedEventObject {
  clearingHouse: string;
}
export type ClearingHouseChangedEvent = TypedEvent<
  [string],
  ClearingHouseChangedEventObject
>;

export type ClearingHouseChangedEventFilter =
  TypedEventFilter<ClearingHouseChangedEvent>;

export interface CollateralLiquidatedEventObject {
  trader: string;
  baseToken: string;
  liquidator: string;
  collateral: BigNumber;
  repaidSettlementWithoutInsuranceFundFeeX10_S: BigNumber;
  insuranceFundFeeX10_S: BigNumber;
  discountRatio: number;
}
export type CollateralLiquidatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, number],
  CollateralLiquidatedEventObject
>;

export type CollateralLiquidatedEventFilter =
  TypedEventFilter<CollateralLiquidatedEvent>;

export interface CollateralManagerChangedEventObject {
  collateralManager: string;
}
export type CollateralManagerChangedEvent = TypedEvent<
  [string],
  CollateralManagerChangedEventObject
>;

export type CollateralManagerChangedEventFilter =
  TypedEventFilter<CollateralManagerChangedEvent>;

export interface DepositedEventObject {
  baseToken: string;
  trader: string;
  amount: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, string, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface TrustedForwarderChangedEventObject {
  trustedForwarder: string;
}
export type TrustedForwarderChangedEvent = TypedEvent<
  [string],
  TrustedForwarderChangedEventObject
>;

export type TrustedForwarderChangedEventFilter =
  TypedEventFilter<TrustedForwarderChangedEvent>;

export interface WETH9ChangedEventObject {
  WETH9: string;
}
export type WETH9ChangedEvent = TypedEvent<[string], WETH9ChangedEventObject>;

export type WETH9ChangedEventFilter = TypedEventFilter<WETH9ChangedEvent>;

export interface WithdrawnEventObject {
  baseToken: string;
  trader: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface IVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decimals(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositEther(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositEtherFor(
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositFor(
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountBalance(
      overrides?: CallOverrides
    ): Promise<[string] & { accountBalance: string }>;

    getAccountValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBalance(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getBalanceByToken(
      trader: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getClearingHouse(overrides?: CallOverrides): Promise<[string]>;

    getClearingHouseConfig(
      overrides?: CallOverrides
    ): Promise<[string] & { clearingHouseConfig: string }>;

    getCollateralManager(overrides?: CallOverrides): Promise<[string]>;

    getCollateralMmRatio(overrides?: CallOverrides): Promise<[number]>;

    getCollateralTokens(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { collateralTokens: string[] }>;

    getExchange(overrides?: CallOverrides): Promise<[string]>;

    getFreeCollateral(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { freeCollateral: BigNumber }>;

    getFreeCollateralByRatio(
      trader: PromiseOrValue<string>,
      ratio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { freeCollateralByRatio: BigNumber }>;

    getFreeCollateralByToken(
      trader: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { freeCollateral: BigNumber }>;

    getInsuranceFund(overrides?: CallOverrides): Promise<[string]>;

    getLiquidatableCollateralBySettlement(
      token: PromiseOrValue<string>,
      settlementX10_S: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateral: BigNumber }>;

    getMarginRequirementForCollateralLiquidation(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxRepaidSettlementAndLiquidatableCollateral(
      trader: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxRepaidSettlementX10_S: BigNumber;
        maxLiquidatableCollateral: BigNumber;
      }
    >;

    getRepaidSettlementByCollateral(
      token: PromiseOrValue<string>,
      collateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { settlementX10_S: BigNumber }>;

    getSettlementToken(
      overrides?: CallOverrides
    ): Promise<[string] & { settlementToken: string }>;

    getSettlementTokenValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalDebt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { debtAmount: BigNumber }>;

    getWETH9(overrides?: CallOverrides): Promise<[string]>;

    isLiquidatable(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidateCollateral(
      trader: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      isDenominatedInSettlementToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  decimals(overrides?: CallOverrides): Promise<number>;

  deposit(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositEther(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositEtherFor(
    to: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositFor(
    to: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountBalance(overrides?: CallOverrides): Promise<string>;

  getAccountValue(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalance(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalanceByToken(
    trader: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClearingHouse(overrides?: CallOverrides): Promise<string>;

  getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

  getCollateralManager(overrides?: CallOverrides): Promise<string>;

  getCollateralMmRatio(overrides?: CallOverrides): Promise<number>;

  getCollateralTokens(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getExchange(overrides?: CallOverrides): Promise<string>;

  getFreeCollateral(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFreeCollateralByRatio(
    trader: PromiseOrValue<string>,
    ratio: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFreeCollateralByToken(
    trader: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInsuranceFund(overrides?: CallOverrides): Promise<string>;

  getLiquidatableCollateralBySettlement(
    token: PromiseOrValue<string>,
    settlementX10_S: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarginRequirementForCollateralLiquidation(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxRepaidSettlementAndLiquidatableCollateral(
    trader: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      maxRepaidSettlementX10_S: BigNumber;
      maxLiquidatableCollateral: BigNumber;
    }
  >;

  getRepaidSettlementByCollateral(
    token: PromiseOrValue<string>,
    collateral: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSettlementToken(overrides?: CallOverrides): Promise<string>;

  getSettlementTokenValue(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  getWETH9(overrides?: CallOverrides): Promise<string>;

  isLiquidatable(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidateCollateral(
    trader: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    isDenominatedInSettlementToken: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawEther(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    decimals(overrides?: CallOverrides): Promise<number>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositEther(overrides?: CallOverrides): Promise<void>;

    depositEtherFor(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFor(
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountBalance(overrides?: CallOverrides): Promise<string>;

    getAccountValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalanceByToken(
      trader: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouse(overrides?: CallOverrides): Promise<string>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

    getCollateralManager(overrides?: CallOverrides): Promise<string>;

    getCollateralMmRatio(overrides?: CallOverrides): Promise<number>;

    getCollateralTokens(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getExchange(overrides?: CallOverrides): Promise<string>;

    getFreeCollateral(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeCollateralByRatio(
      trader: PromiseOrValue<string>,
      ratio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeCollateralByToken(
      trader: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInsuranceFund(overrides?: CallOverrides): Promise<string>;

    getLiquidatableCollateralBySettlement(
      token: PromiseOrValue<string>,
      settlementX10_S: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginRequirementForCollateralLiquidation(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxRepaidSettlementAndLiquidatableCollateral(
      trader: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxRepaidSettlementX10_S: BigNumber;
        maxLiquidatableCollateral: BigNumber;
      }
    >;

    getRepaidSettlementByCollateral(
      token: PromiseOrValue<string>,
      collateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettlementToken(overrides?: CallOverrides): Promise<string>;

    getSettlementTokenValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getWETH9(overrides?: CallOverrides): Promise<string>;

    isLiquidatable(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidateCollateral(
      trader: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      isDenominatedInSettlementToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClearingHouseChanged(address)"(
      clearingHouse?: PromiseOrValue<string> | null
    ): ClearingHouseChangedEventFilter;
    ClearingHouseChanged(
      clearingHouse?: PromiseOrValue<string> | null
    ): ClearingHouseChangedEventFilter;

    "CollateralLiquidated(address,address,address,uint256,uint256,uint256,uint24)"(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      liquidator?: PromiseOrValue<string> | null,
      collateral?: null,
      repaidSettlementWithoutInsuranceFundFeeX10_S?: null,
      insuranceFundFeeX10_S?: null,
      discountRatio?: null
    ): CollateralLiquidatedEventFilter;
    CollateralLiquidated(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      liquidator?: PromiseOrValue<string> | null,
      collateral?: null,
      repaidSettlementWithoutInsuranceFundFeeX10_S?: null,
      insuranceFundFeeX10_S?: null,
      discountRatio?: null
    ): CollateralLiquidatedEventFilter;

    "CollateralManagerChanged(address)"(
      collateralManager?: PromiseOrValue<string> | null
    ): CollateralManagerChangedEventFilter;
    CollateralManagerChanged(
      collateralManager?: PromiseOrValue<string> | null
    ): CollateralManagerChangedEventFilter;

    "Deposited(address,address,uint256)"(
      baseToken?: PromiseOrValue<string> | null,
      trader?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositedEventFilter;
    Deposited(
      baseToken?: PromiseOrValue<string> | null,
      trader?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositedEventFilter;

    "TrustedForwarderChanged(address)"(
      trustedForwarder?: PromiseOrValue<string> | null
    ): TrustedForwarderChangedEventFilter;
    TrustedForwarderChanged(
      trustedForwarder?: PromiseOrValue<string> | null
    ): TrustedForwarderChangedEventFilter;

    "WETH9Changed(address)"(
      WETH9?: PromiseOrValue<string> | null
    ): WETH9ChangedEventFilter;
    WETH9Changed(
      WETH9?: PromiseOrValue<string> | null
    ): WETH9ChangedEventFilter;

    "Withdrawn(address,address,uint256)"(
      baseToken?: PromiseOrValue<string> | null,
      trader?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      baseToken?: PromiseOrValue<string> | null,
      trader?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositEther(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositEtherFor(
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositFor(
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalanceByToken(
      trader: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouse(overrides?: CallOverrides): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralManager(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralMmRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralTokens(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchange(overrides?: CallOverrides): Promise<BigNumber>;

    getFreeCollateral(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeCollateralByRatio(
      trader: PromiseOrValue<string>,
      ratio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeCollateralByToken(
      trader: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInsuranceFund(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidatableCollateralBySettlement(
      token: PromiseOrValue<string>,
      settlementX10_S: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginRequirementForCollateralLiquidation(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxRepaidSettlementAndLiquidatableCollateral(
      trader: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepaidSettlementByCollateral(
      token: PromiseOrValue<string>,
      collateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettlementToken(overrides?: CallOverrides): Promise<BigNumber>;

    getSettlementTokenValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getWETH9(overrides?: CallOverrides): Promise<BigNumber>;

    isLiquidatable(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateCollateral(
      trader: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      isDenominatedInSettlementToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositEther(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositEtherFor(
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositFor(
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalanceByToken(
      trader: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClearingHouseConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralMmRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralTokens(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFreeCollateral(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFreeCollateralByRatio(
      trader: PromiseOrValue<string>,
      ratio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFreeCollateralByToken(
      trader: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInsuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidatableCollateralBySettlement(
      token: PromiseOrValue<string>,
      settlementX10_S: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginRequirementForCollateralLiquidation(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxRepaidSettlementAndLiquidatableCollateral(
      trader: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRepaidSettlementByCollateral(
      token: PromiseOrValue<string>,
      collateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSettlementToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSettlementTokenValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLiquidatable(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateCollateral(
      trader: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      isDenominatedInSettlementToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
