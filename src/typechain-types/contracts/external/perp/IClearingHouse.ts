/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IClearingHouse {
  export type AddLiquidityParamsStruct = {
    baseToken: PromiseOrValue<string>;
    base: PromiseOrValue<BigNumberish>;
    quote: PromiseOrValue<BigNumberish>;
    lowerTick: PromiseOrValue<BigNumberish>;
    upperTick: PromiseOrValue<BigNumberish>;
    minBase: PromiseOrValue<BigNumberish>;
    minQuote: PromiseOrValue<BigNumberish>;
    useTakerBalance: PromiseOrValue<boolean>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type AddLiquidityParamsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    baseToken: string;
    base: BigNumber;
    quote: BigNumber;
    lowerTick: number;
    upperTick: number;
    minBase: BigNumber;
    minQuote: BigNumber;
    useTakerBalance: boolean;
    deadline: BigNumber;
  };

  export type AddLiquidityResponseStruct = {
    base: PromiseOrValue<BigNumberish>;
    quote: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
  };

  export type AddLiquidityResponseStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    base: BigNumber;
    quote: BigNumber;
    fee: BigNumber;
    liquidity: BigNumber;
  };

  export type ClosePositionParamsStruct = {
    baseToken: PromiseOrValue<string>;
    sqrtPriceLimitX96: PromiseOrValue<BigNumberish>;
    oppositeAmountBound: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    referralCode: PromiseOrValue<BytesLike>;
  };

  export type ClosePositionParamsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    baseToken: string;
    sqrtPriceLimitX96: BigNumber;
    oppositeAmountBound: BigNumber;
    deadline: BigNumber;
    referralCode: string;
  };

  export type OpenPositionParamsStruct = {
    baseToken: PromiseOrValue<string>;
    isBaseToQuote: PromiseOrValue<boolean>;
    isExactInput: PromiseOrValue<boolean>;
    amount: PromiseOrValue<BigNumberish>;
    oppositeAmountBound: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    sqrtPriceLimitX96: PromiseOrValue<BigNumberish>;
    referralCode: PromiseOrValue<BytesLike>;
  };

  export type OpenPositionParamsStructOutput = [
    string,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    baseToken: string;
    isBaseToQuote: boolean;
    isExactInput: boolean;
    amount: BigNumber;
    oppositeAmountBound: BigNumber;
    deadline: BigNumber;
    sqrtPriceLimitX96: BigNumber;
    referralCode: string;
  };

  export type RemoveLiquidityParamsStruct = {
    baseToken: PromiseOrValue<string>;
    lowerTick: PromiseOrValue<BigNumberish>;
    upperTick: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
    minBase: PromiseOrValue<BigNumberish>;
    minQuote: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type RemoveLiquidityParamsStructOutput = [
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    baseToken: string;
    lowerTick: number;
    upperTick: number;
    liquidity: BigNumber;
    minBase: BigNumber;
    minQuote: BigNumber;
    deadline: BigNumber;
  };

  export type RemoveLiquidityResponseStruct = {
    base: PromiseOrValue<BigNumberish>;
    quote: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
  };

  export type RemoveLiquidityResponseStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & { base: BigNumber; quote: BigNumber; fee: BigNumber };
}

export interface IClearingHouseInterface extends utils.Interface {
  functions: {
    "addLiquidity((address,uint256,uint256,int24,int24,uint256,uint256,bool,uint256))": FunctionFragment;
    "cancelAllExcessOrders(address,address)": FunctionFragment;
    "cancelExcessOrders(address,address,bytes32[])": FunctionFragment;
    "closePosition((address,uint160,uint256,uint256,bytes32))": FunctionFragment;
    "getAccountBalance()": FunctionFragment;
    "getAccountValue(address)": FunctionFragment;
    "getClearingHouseConfig()": FunctionFragment;
    "getExchange()": FunctionFragment;
    "getInsuranceFund()": FunctionFragment;
    "getOrderBook()": FunctionFragment;
    "getQuoteToken()": FunctionFragment;
    "getUniswapV3Factory()": FunctionFragment;
    "getVault()": FunctionFragment;
    "liquidate(address,address,uint256)": FunctionFragment;
    "liquidate(address,address)": FunctionFragment;
    "openPosition((address,bool,bool,uint256,uint256,uint256,uint160,bytes32))": FunctionFragment;
    "quitMarket(address,address)": FunctionFragment;
    "removeLiquidity((address,int24,int24,uint128,uint256,uint256,uint256))": FunctionFragment;
    "settleAllFunding(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "cancelAllExcessOrders"
      | "cancelExcessOrders"
      | "closePosition"
      | "getAccountBalance"
      | "getAccountValue"
      | "getClearingHouseConfig"
      | "getExchange"
      | "getInsuranceFund"
      | "getOrderBook"
      | "getQuoteToken"
      | "getUniswapV3Factory"
      | "getVault"
      | "liquidate(address,address,uint256)"
      | "liquidate(address,address)"
      | "openPosition"
      | "quitMarket"
      | "removeLiquidity"
      | "settleAllFunding"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [IClearingHouse.AddLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAllExcessOrders",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelExcessOrders",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [IClearingHouse.ClosePositionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearingHouseConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInsuranceFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV3Factory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidate(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [IClearingHouse.OpenPositionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quitMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [IClearingHouse.RemoveLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAllFunding",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAllExcessOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelExcessOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV3Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidate(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidate(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quitMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAllFunding",
    data: BytesLike
  ): Result;

  events: {
    "FundingPaymentSettled(address,address,int256)": EventFragment;
    "LiquidityChanged(address,address,address,int24,int24,int256,int256,int128,uint256)": EventFragment;
    "PositionChanged(address,address,int256,int256,uint256,int256,int256,uint256)": EventFragment;
    "PositionClosed(address,address,int256,int256,int256,int256,uint256)": EventFragment;
    "PositionLiquidated(address,address,uint256,uint256,uint256,address)": EventFragment;
    "ReferredPositionChanged(bytes32)": EventFragment;
    "TrustedForwarderChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundingPaymentSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferredPositionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedForwarderChanged"): EventFragment;
}

export interface FundingPaymentSettledEventObject {
  trader: string;
  baseToken: string;
  fundingPayment: BigNumber;
}
export type FundingPaymentSettledEvent = TypedEvent<
  [string, string, BigNumber],
  FundingPaymentSettledEventObject
>;

export type FundingPaymentSettledEventFilter =
  TypedEventFilter<FundingPaymentSettledEvent>;

export interface LiquidityChangedEventObject {
  maker: string;
  baseToken: string;
  quoteToken: string;
  lowerTick: number;
  upperTick: number;
  base: BigNumber;
  quote: BigNumber;
  liquidity: BigNumber;
  quoteFee: BigNumber;
}
export type LiquidityChangedEvent = TypedEvent<
  [
    string,
    string,
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  LiquidityChangedEventObject
>;

export type LiquidityChangedEventFilter =
  TypedEventFilter<LiquidityChangedEvent>;

export interface PositionChangedEventObject {
  trader: string;
  baseToken: string;
  exchangedPositionSize: BigNumber;
  exchangedPositionNotional: BigNumber;
  fee: BigNumber;
  openNotional: BigNumber;
  realizedPnl: BigNumber;
  sqrtPriceAfterX96: BigNumber;
}
export type PositionChangedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  PositionChangedEventObject
>;

export type PositionChangedEventFilter = TypedEventFilter<PositionChangedEvent>;

export interface PositionClosedEventObject {
  trader: string;
  baseToken: string;
  closedPositionSize: BigNumber;
  closedPositionNotional: BigNumber;
  openNotional: BigNumber;
  realizedPnl: BigNumber;
  closedPrice: BigNumber;
}
export type PositionClosedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  PositionClosedEventObject
>;

export type PositionClosedEventFilter = TypedEventFilter<PositionClosedEvent>;

export interface PositionLiquidatedEventObject {
  trader: string;
  baseToken: string;
  positionNotional: BigNumber;
  positionSize: BigNumber;
  liquidationFee: BigNumber;
  liquidator: string;
}
export type PositionLiquidatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string],
  PositionLiquidatedEventObject
>;

export type PositionLiquidatedEventFilter =
  TypedEventFilter<PositionLiquidatedEvent>;

export interface ReferredPositionChangedEventObject {
  referralCode: string;
}
export type ReferredPositionChangedEvent = TypedEvent<
  [string],
  ReferredPositionChangedEventObject
>;

export type ReferredPositionChangedEventFilter =
  TypedEventFilter<ReferredPositionChangedEvent>;

export interface TrustedForwarderChangedEventObject {
  forwarder: string;
}
export type TrustedForwarderChangedEvent = TypedEvent<
  [string],
  TrustedForwarderChangedEventObject
>;

export type TrustedForwarderChangedEventFilter =
  TypedEventFilter<TrustedForwarderChangedEvent>;

export interface IClearingHouse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IClearingHouseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      params: IClearingHouse.AddLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelAllExcessOrders(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelExcessOrders(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      orderIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closePosition(
      params: IClearingHouse.ClosePositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountBalance(
      overrides?: CallOverrides
    ): Promise<[string] & { accountBalance: string }>;

    getAccountValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { accountValue: BigNumber }>;

    getClearingHouseConfig(
      overrides?: CallOverrides
    ): Promise<[string] & { clearingHouseConfig: string }>;

    getExchange(
      overrides?: CallOverrides
    ): Promise<[string] & { exchange: string }>;

    getInsuranceFund(
      overrides?: CallOverrides
    ): Promise<[string] & { insuranceFund: string }>;

    getOrderBook(
      overrides?: CallOverrides
    ): Promise<[string] & { orderBook: string }>;

    getQuoteToken(
      overrides?: CallOverrides
    ): Promise<[string] & { quoteToken: string }>;

    getUniswapV3Factory(
      overrides?: CallOverrides
    ): Promise<[string] & { factory: string }>;

    getVault(overrides?: CallOverrides): Promise<[string] & { vault: string }>;

    "liquidate(address,address,uint256)"(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      oppositeAmountBound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "liquidate(address,address)"(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openPosition(
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quitMarket(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      params: IClearingHouse.RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleAllFunding(
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    params: IClearingHouse.AddLiquidityParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelAllExcessOrders(
    maker: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelExcessOrders(
    maker: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    orderIds: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closePosition(
    params: IClearingHouse.ClosePositionParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountBalance(overrides?: CallOverrides): Promise<string>;

  getAccountValue(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

  getExchange(overrides?: CallOverrides): Promise<string>;

  getInsuranceFund(overrides?: CallOverrides): Promise<string>;

  getOrderBook(overrides?: CallOverrides): Promise<string>;

  getQuoteToken(overrides?: CallOverrides): Promise<string>;

  getUniswapV3Factory(overrides?: CallOverrides): Promise<string>;

  getVault(overrides?: CallOverrides): Promise<string>;

  "liquidate(address,address,uint256)"(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    oppositeAmountBound: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "liquidate(address,address)"(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openPosition(
    params: IClearingHouse.OpenPositionParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quitMarket(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    params: IClearingHouse.RemoveLiquidityParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleAllFunding(
    trader: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      params: IClearingHouse.AddLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<IClearingHouse.AddLiquidityResponseStructOutput>;

    cancelAllExcessOrders(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelExcessOrders(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      orderIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    closePosition(
      params: IClearingHouse.ClosePositionParamsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { base: BigNumber; quote: BigNumber }>;

    getAccountBalance(overrides?: CallOverrides): Promise<string>;

    getAccountValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

    getExchange(overrides?: CallOverrides): Promise<string>;

    getInsuranceFund(overrides?: CallOverrides): Promise<string>;

    getOrderBook(overrides?: CallOverrides): Promise<string>;

    getQuoteToken(overrides?: CallOverrides): Promise<string>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<string>;

    getVault(overrides?: CallOverrides): Promise<string>;

    "liquidate(address,address,uint256)"(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      oppositeAmountBound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        base: BigNumber;
        quote: BigNumber;
        isPartialClose: boolean;
      }
    >;

    "liquidate(address,address)"(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    openPosition(
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { base: BigNumber; quote: BigNumber }>;

    quitMarket(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { base: BigNumber; quote: BigNumber }>;

    removeLiquidity(
      params: IClearingHouse.RemoveLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<IClearingHouse.RemoveLiquidityResponseStructOutput>;

    settleAllFunding(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FundingPaymentSettled(address,address,int256)"(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      fundingPayment?: null
    ): FundingPaymentSettledEventFilter;
    FundingPaymentSettled(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      fundingPayment?: null
    ): FundingPaymentSettledEventFilter;

    "LiquidityChanged(address,address,address,int24,int24,int256,int256,int128,uint256)"(
      maker?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      quoteToken?: PromiseOrValue<string> | null,
      lowerTick?: null,
      upperTick?: null,
      base?: null,
      quote?: null,
      liquidity?: null,
      quoteFee?: null
    ): LiquidityChangedEventFilter;
    LiquidityChanged(
      maker?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      quoteToken?: PromiseOrValue<string> | null,
      lowerTick?: null,
      upperTick?: null,
      base?: null,
      quote?: null,
      liquidity?: null,
      quoteFee?: null
    ): LiquidityChangedEventFilter;

    "PositionChanged(address,address,int256,int256,uint256,int256,int256,uint256)"(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      exchangedPositionSize?: null,
      exchangedPositionNotional?: null,
      fee?: null,
      openNotional?: null,
      realizedPnl?: null,
      sqrtPriceAfterX96?: null
    ): PositionChangedEventFilter;
    PositionChanged(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      exchangedPositionSize?: null,
      exchangedPositionNotional?: null,
      fee?: null,
      openNotional?: null,
      realizedPnl?: null,
      sqrtPriceAfterX96?: null
    ): PositionChangedEventFilter;

    "PositionClosed(address,address,int256,int256,int256,int256,uint256)"(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      closedPositionSize?: null,
      closedPositionNotional?: null,
      openNotional?: null,
      realizedPnl?: null,
      closedPrice?: null
    ): PositionClosedEventFilter;
    PositionClosed(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      closedPositionSize?: null,
      closedPositionNotional?: null,
      openNotional?: null,
      realizedPnl?: null,
      closedPrice?: null
    ): PositionClosedEventFilter;

    "PositionLiquidated(address,address,uint256,uint256,uint256,address)"(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      positionNotional?: null,
      positionSize?: null,
      liquidationFee?: null,
      liquidator?: null
    ): PositionLiquidatedEventFilter;
    PositionLiquidated(
      trader?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      positionNotional?: null,
      positionSize?: null,
      liquidationFee?: null,
      liquidator?: null
    ): PositionLiquidatedEventFilter;

    "ReferredPositionChanged(bytes32)"(
      referralCode?: PromiseOrValue<BytesLike> | null
    ): ReferredPositionChangedEventFilter;
    ReferredPositionChanged(
      referralCode?: PromiseOrValue<BytesLike> | null
    ): ReferredPositionChangedEventFilter;

    "TrustedForwarderChanged(address)"(
      forwarder?: PromiseOrValue<string> | null
    ): TrustedForwarderChangedEventFilter;
    TrustedForwarderChanged(
      forwarder?: PromiseOrValue<string> | null
    ): TrustedForwarderChangedEventFilter;
  };

  estimateGas: {
    addLiquidity(
      params: IClearingHouse.AddLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelAllExcessOrders(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelExcessOrders(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      orderIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closePosition(
      params: IClearingHouse.ClosePositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getExchange(overrides?: CallOverrides): Promise<BigNumber>;

    getInsuranceFund(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderBook(overrides?: CallOverrides): Promise<BigNumber>;

    getQuoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidate(address,address,uint256)"(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      oppositeAmountBound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "liquidate(address,address)"(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openPosition(
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quitMarket(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      params: IClearingHouse.RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleAllFunding(
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      params: IClearingHouse.AddLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelAllExcessOrders(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelExcessOrders(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      orderIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closePosition(
      params: IClearingHouse.ClosePositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClearingHouseConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInsuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrderBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getQuoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUniswapV3Factory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidate(address,address,uint256)"(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      oppositeAmountBound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "liquidate(address,address)"(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openPosition(
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quitMarket(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      params: IClearingHouse.RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleAllFunding(
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
