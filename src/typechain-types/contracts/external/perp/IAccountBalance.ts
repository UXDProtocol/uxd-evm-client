/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace AccountMarket {
  export type InfoStruct = {
    takerPositionSize: PromiseOrValue<BigNumberish>;
    takerOpenNotional: PromiseOrValue<BigNumberish>;
    lastTwPremiumGrowthGlobalX96: PromiseOrValue<BigNumberish>;
  };

  export type InfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    takerPositionSize: BigNumber;
    takerOpenNotional: BigNumber;
    lastTwPremiumGrowthGlobalX96: BigNumber;
  };
}

export interface IAccountBalanceInterface extends utils.Interface {
  functions: {
    "deregisterBaseToken(address,address)": FunctionFragment;
    "getAccountInfo(address,address)": FunctionFragment;
    "getBase(address,address)": FunctionFragment;
    "getBaseTokens(address)": FunctionFragment;
    "getClearingHouseConfig()": FunctionFragment;
    "getMarginRequirementForLiquidation(address)": FunctionFragment;
    "getOrderBook()": FunctionFragment;
    "getPnlAndPendingFee(address)": FunctionFragment;
    "getQuote(address,address)": FunctionFragment;
    "getTakerOpenNotional(address,address)": FunctionFragment;
    "getTakerPositionSize(address,address)": FunctionFragment;
    "getTotalAbsPositionValue(address)": FunctionFragment;
    "getTotalDebtValue(address)": FunctionFragment;
    "getTotalOpenNotional(address,address)": FunctionFragment;
    "getTotalPositionSize(address,address)": FunctionFragment;
    "getTotalPositionValue(address,address)": FunctionFragment;
    "getVault()": FunctionFragment;
    "hasOrder(address)": FunctionFragment;
    "modifyOwedRealizedPnl(address,int256)": FunctionFragment;
    "modifyTakerBalance(address,address,int256,int256)": FunctionFragment;
    "registerBaseToken(address,address)": FunctionFragment;
    "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)": FunctionFragment;
    "settleOwedRealizedPnl(address)": FunctionFragment;
    "settlePositionInClosedMarket(address,address)": FunctionFragment;
    "settleQuoteToOwedRealizedPnl(address,address,int256)": FunctionFragment;
    "updateTwPremiumGrowthGlobal(address,address,int256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deregisterBaseToken"
      | "getAccountInfo"
      | "getBase"
      | "getBaseTokens"
      | "getClearingHouseConfig"
      | "getMarginRequirementForLiquidation"
      | "getOrderBook"
      | "getPnlAndPendingFee"
      | "getQuote"
      | "getTakerOpenNotional"
      | "getTakerPositionSize"
      | "getTotalAbsPositionValue"
      | "getTotalDebtValue"
      | "getTotalOpenNotional"
      | "getTotalPositionSize"
      | "getTotalPositionValue"
      | "getVault"
      | "hasOrder"
      | "modifyOwedRealizedPnl"
      | "modifyTakerBalance"
      | "registerBaseToken"
      | "settleBalanceAndDeregister"
      | "settleOwedRealizedPnl"
      | "settlePositionInClosedMarket"
      | "settleQuoteToOwedRealizedPnl"
      | "updateTwPremiumGrowthGlobal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deregisterBaseToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBase",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearingHouseConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginRequirementForLiquidation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPnlAndPendingFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuote",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTakerOpenNotional",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTakerPositionSize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAbsPositionValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebtValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalOpenNotional",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPositionSize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPositionValue",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasOrder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyOwedRealizedPnl",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyTakerBalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBaseToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBalanceAndDeregister",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settleOwedRealizedPnl",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settlePositionInClosedMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleQuoteToOwedRealizedPnl",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTwPremiumGrowthGlobal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "deregisterBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginRequirementForLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPnlAndPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTakerOpenNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTakerPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAbsPositionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebtValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalOpenNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPositionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyOwedRealizedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyTakerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleBalanceAndDeregister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleOwedRealizedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlePositionInClosedMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleQuoteToOwedRealizedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTwPremiumGrowthGlobal",
    data: BytesLike
  ): Result;

  events: {
    "PnlRealized(address,int256)": EventFragment;
    "VaultChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PnlRealized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultChanged"): EventFragment;
}

export interface PnlRealizedEventObject {
  trader: string;
  amount: BigNumber;
}
export type PnlRealizedEvent = TypedEvent<
  [string, BigNumber],
  PnlRealizedEventObject
>;

export type PnlRealizedEventFilter = TypedEventFilter<PnlRealizedEvent>;

export interface VaultChangedEventObject {
  vault: string;
}
export type VaultChangedEvent = TypedEvent<[string], VaultChangedEventObject>;

export type VaultChangedEventFilter = TypedEventFilter<VaultChangedEvent>;

export interface IAccountBalance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAccountBalanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deregisterBaseToken(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountInfo(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [AccountMarket.InfoStructOutput] & {
        traderAccountInfo: AccountMarket.InfoStructOutput;
      }
    >;

    getBase(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { baseAmount: BigNumber }>;

    getBaseTokens(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { baseTokens: string[] }>;

    getClearingHouseConfig(
      overrides?: CallOverrides
    ): Promise<[string] & { clearingHouseConfig: string }>;

    getMarginRequirementForLiquidation(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { marginRequirementForLiquidation: BigNumber }>;

    getOrderBook(
      overrides?: CallOverrides
    ): Promise<[string] & { orderBook: string }>;

    getPnlAndPendingFee(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        owedRealizedPnl: BigNumber;
        unrealizedPnl: BigNumber;
        pendingFee: BigNumber;
      }
    >;

    getQuote(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quoteAmount: BigNumber }>;

    getTakerOpenNotional(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { openNotional: BigNumber }>;

    getTakerPositionSize(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { takerPositionSize: BigNumber }>;

    getTotalAbsPositionValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalAbsPositionValue: BigNumber }>;

    getTotalDebtValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalDebtValue: BigNumber }>;

    getTotalOpenNotional(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalOpenNotional: BigNumber }>;

    getTotalPositionSize(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalPositionSize: BigNumber }>;

    getTotalPositionValue(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalPositionValue: BigNumber }>;

    getVault(overrides?: CallOverrides): Promise<[string] & { vault: string }>;

    hasOrder(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { hasOrder: boolean }>;

    modifyOwedRealizedPnl(
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    modifyTakerBalance(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      base: PromiseOrValue<BigNumberish>,
      quote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerBaseToken(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleBalanceAndDeregister(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      takerBase: PromiseOrValue<BigNumberish>,
      takerQuote: PromiseOrValue<BigNumberish>,
      realizedPnl: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleOwedRealizedPnl(
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settlePositionInClosedMarket(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleQuoteToOwedRealizedPnl(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTwPremiumGrowthGlobal(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      lastTwPremiumGrowthGlobalX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deregisterBaseToken(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountInfo(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AccountMarket.InfoStructOutput>;

  getBase(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBaseTokens(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

  getMarginRequirementForLiquidation(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrderBook(overrides?: CallOverrides): Promise<string>;

  getPnlAndPendingFee(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      owedRealizedPnl: BigNumber;
      unrealizedPnl: BigNumber;
      pendingFee: BigNumber;
    }
  >;

  getQuote(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTakerOpenNotional(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTakerPositionSize(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalAbsPositionValue(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDebtValue(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalOpenNotional(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalPositionSize(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalPositionValue(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVault(overrides?: CallOverrides): Promise<string>;

  hasOrder(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  modifyOwedRealizedPnl(
    trader: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  modifyTakerBalance(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    base: PromiseOrValue<BigNumberish>,
    quote: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerBaseToken(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleBalanceAndDeregister(
    maker: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    takerBase: PromiseOrValue<BigNumberish>,
    takerQuote: PromiseOrValue<BigNumberish>,
    realizedPnl: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleOwedRealizedPnl(
    trader: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settlePositionInClosedMarket(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleQuoteToOwedRealizedPnl(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTwPremiumGrowthGlobal(
    trader: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    lastTwPremiumGrowthGlobalX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deregisterBaseToken(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountInfo(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AccountMarket.InfoStructOutput>;

    getBase(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokens(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

    getMarginRequirementForLiquidation(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBook(overrides?: CallOverrides): Promise<string>;

    getPnlAndPendingFee(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        owedRealizedPnl: BigNumber;
        unrealizedPnl: BigNumber;
        pendingFee: BigNumber;
      }
    >;

    getQuote(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerOpenNotional(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerPositionSize(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAbsPositionValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebtValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOpenNotional(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionSize(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionValue(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<string>;

    hasOrder(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    modifyOwedRealizedPnl(
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyTakerBalance(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      base: PromiseOrValue<BigNumberish>,
      quote: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerPositionSize: BigNumber;
        takerOpenNotional: BigNumber;
      }
    >;

    registerBaseToken(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleBalanceAndDeregister(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      takerBase: PromiseOrValue<BigNumberish>,
      takerQuote: PromiseOrValue<BigNumberish>,
      realizedPnl: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleOwedRealizedPnl(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settlePositionInClosedMarket(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        positionNotional: BigNumber;
        openNotional: BigNumber;
        realizedPnl: BigNumber;
        closedPrice: BigNumber;
      }
    >;

    settleQuoteToOwedRealizedPnl(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTwPremiumGrowthGlobal(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      lastTwPremiumGrowthGlobalX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PnlRealized(address,int256)"(
      trader?: PromiseOrValue<string> | null,
      amount?: null
    ): PnlRealizedEventFilter;
    PnlRealized(
      trader?: PromiseOrValue<string> | null,
      amount?: null
    ): PnlRealizedEventFilter;

    "VaultChanged(address)"(
      vault?: PromiseOrValue<string> | null
    ): VaultChangedEventFilter;
    VaultChanged(
      vault?: PromiseOrValue<string> | null
    ): VaultChangedEventFilter;
  };

  estimateGas: {
    deregisterBaseToken(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountInfo(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBase(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokens(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getMarginRequirementForLiquidation(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBook(overrides?: CallOverrides): Promise<BigNumber>;

    getPnlAndPendingFee(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuote(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerOpenNotional(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerPositionSize(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAbsPositionValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebtValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOpenNotional(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionSize(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionValue(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    hasOrder(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifyOwedRealizedPnl(
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    modifyTakerBalance(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      base: PromiseOrValue<BigNumberish>,
      quote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerBaseToken(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleBalanceAndDeregister(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      takerBase: PromiseOrValue<BigNumberish>,
      takerQuote: PromiseOrValue<BigNumberish>,
      realizedPnl: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleOwedRealizedPnl(
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settlePositionInClosedMarket(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleQuoteToOwedRealizedPnl(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTwPremiumGrowthGlobal(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      lastTwPremiumGrowthGlobalX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deregisterBaseToken(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountInfo(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBase(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseTokens(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClearingHouseConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginRequirementForLiquidation(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPnlAndPendingFee(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuote(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTakerOpenNotional(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTakerPositionSize(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAbsPositionValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDebtValue(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalOpenNotional(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPositionSize(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPositionValue(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasOrder(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifyOwedRealizedPnl(
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    modifyTakerBalance(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      base: PromiseOrValue<BigNumberish>,
      quote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerBaseToken(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleBalanceAndDeregister(
      maker: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      takerBase: PromiseOrValue<BigNumberish>,
      takerQuote: PromiseOrValue<BigNumberish>,
      realizedPnl: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleOwedRealizedPnl(
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settlePositionInClosedMarket(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleQuoteToOwedRealizedPnl(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTwPremiumGrowthGlobal(
      trader: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      lastTwPremiumGrowthGlobalX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
