/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IClearingHouse {
  export type OpenPositionParamsStruct = {
    baseToken: PromiseOrValue<string>;
    isBaseToQuote: PromiseOrValue<boolean>;
    isExactInput: PromiseOrValue<boolean>;
    amount: PromiseOrValue<BigNumberish>;
    oppositeAmountBound: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    sqrtPriceLimitX96: PromiseOrValue<BigNumberish>;
    referralCode: PromiseOrValue<BytesLike>;
  };

  export type OpenPositionParamsStructOutput = [
    string,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    baseToken: string;
    isBaseToQuote: boolean;
    isExactInput: boolean;
    amount: BigNumber;
    oppositeAmountBound: BigNumber;
    deadline: BigNumber;
    sqrtPriceLimitX96: BigNumber;
    referralCode: string;
  };
}

export interface MockPerpClearingHouseInterface extends utils.Interface {
  functions: {
    "getAccountBalance()": FunctionFragment;
    "multiplier()": FunctionFragment;
    "openPosition((address,bool,bool,uint256,uint256,uint256,uint160,bytes32))": FunctionFragment;
    "setAccountBalance(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAccountBalance"
      | "multiplier"
      | "openPosition"
      | "setAccountBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [IClearingHouse.OpenPositionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountBalance",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiplier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountBalance",
    data: BytesLike
  ): Result;

  events: {
    "OpenPositionCalled(address,bool,bool,uint256,uint256,uint256,uint160,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OpenPositionCalled"): EventFragment;
}

export interface OpenPositionCalledEventObject {
  baseToken: string;
  isBaseToQuote: boolean;
  isExactInput: boolean;
  amount: BigNumber;
  oppositeAmountBound: BigNumber;
  deadline: BigNumber;
  sqrtPriceLimitX96: BigNumber;
  referralCode: string;
}
export type OpenPositionCalledEvent = TypedEvent<
  [
    string,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  OpenPositionCalledEventObject
>;

export type OpenPositionCalledEventFilter =
  TypedEventFilter<OpenPositionCalledEvent>;

export interface MockPerpClearingHouse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockPerpClearingHouseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountBalance(overrides?: CallOverrides): Promise<[string]>;

    multiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    openPosition(
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAccountBalance(
      balanceContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getAccountBalance(overrides?: CallOverrides): Promise<string>;

  multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  openPosition(
    params: IClearingHouse.OpenPositionParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAccountBalance(
    balanceContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccountBalance(overrides?: CallOverrides): Promise<string>;

    multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    openPosition(
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    setAccountBalance(
      balanceContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OpenPositionCalled(address,bool,bool,uint256,uint256,uint256,uint160,bytes32)"(
      baseToken?: null,
      isBaseToQuote?: null,
      isExactInput?: null,
      amount?: null,
      oppositeAmountBound?: null,
      deadline?: null,
      sqrtPriceLimitX96?: null,
      referralCode?: null
    ): OpenPositionCalledEventFilter;
    OpenPositionCalled(
      baseToken?: null,
      isBaseToQuote?: null,
      isExactInput?: null,
      amount?: null,
      oppositeAmountBound?: null,
      deadline?: null,
      sqrtPriceLimitX96?: null,
      referralCode?: null
    ): OpenPositionCalledEventFilter;
  };

  estimateGas: {
    getAccountBalance(overrides?: CallOverrides): Promise<BigNumber>;

    multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    openPosition(
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAccountBalance(
      balanceContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openPosition(
      params: IClearingHouse.OpenPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAccountBalance(
      balanceContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
