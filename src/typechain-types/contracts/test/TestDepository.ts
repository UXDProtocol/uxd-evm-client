/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface TestDepositoryInterface extends utils.Interface {
  functions: {
    "assetToken()": FunctionFragment;
    "collateralDeposited()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "depositInsurance(uint256,address)": FunctionFragment;
    "getExchangeFee()": FunctionFragment;
    "getExchangeFeeWad()": FunctionFragment;
    "getPositionValue()": FunctionFragment;
    "getUnrealizedPnl()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "insuranceDeposited()": FunctionFragment;
    "insuranceToken()": FunctionFragment;
    "market()": FunctionFragment;
    "processQuoteMint(uint256)": FunctionFragment;
    "processQuoteRedeem(uint256,address)": FunctionFragment;
    "quoteToken()": FunctionFragment;
    "redeem(address,uint256)": FunctionFragment;
    "redeemableSoftCap()": FunctionFragment;
    "redeemableUnderManagement()": FunctionFragment;
    "totalFeesPaid()": FunctionFragment;
    "withdrawInsurance(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assetToken"
      | "collateralDeposited"
      | "deposit"
      | "depositInsurance"
      | "getExchangeFee"
      | "getExchangeFeeWad"
      | "getPositionValue"
      | "getUnrealizedPnl"
      | "initialize"
      | "insuranceDeposited"
      | "insuranceToken"
      | "market"
      | "processQuoteMint"
      | "processQuoteRedeem"
      | "quoteToken"
      | "redeem"
      | "redeemableSoftCap"
      | "redeemableUnderManagement"
      | "totalFeesPaid"
      | "withdrawInsurance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assetToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositInsurance",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeFeeWad",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnrealizedPnl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processQuoteMint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "processQuoteRedeem",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemableSoftCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemableUnderManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeesPaid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawInsurance",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "assetToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositInsurance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeFeeWad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnrealizedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insuranceDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insuranceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processQuoteMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processQuoteRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemableSoftCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemableUnderManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeesPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInsurance",
    data: BytesLike
  ): Result;

  events: {
    "CollateralDeposited(address,uint256)": EventFragment;
    "CollateralWithdrawnTo(address,uint256,address)": EventFragment;
    "InsuranceDeposited(address,address,uint256)": EventFragment;
    "InsuranceWithdrawn(address,address,uint256)": EventFragment;
    "LongOpened(uint256,address)": EventFragment;
    "ShortOpened(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollateralDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralWithdrawnTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsuranceDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsuranceWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LongOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShortOpened"): EventFragment;
}

export interface CollateralDepositedEventObject {
  token: string;
  amount: BigNumber;
}
export type CollateralDepositedEvent = TypedEvent<
  [string, BigNumber],
  CollateralDepositedEventObject
>;

export type CollateralDepositedEventFilter =
  TypedEventFilter<CollateralDepositedEvent>;

export interface CollateralWithdrawnToEventObject {
  token: string;
  amount: BigNumber;
  to: string;
}
export type CollateralWithdrawnToEvent = TypedEvent<
  [string, BigNumber, string],
  CollateralWithdrawnToEventObject
>;

export type CollateralWithdrawnToEventFilter =
  TypedEventFilter<CollateralWithdrawnToEvent>;

export interface InsuranceDepositedEventObject {
  caller: string;
  from: string;
  amount: BigNumber;
}
export type InsuranceDepositedEvent = TypedEvent<
  [string, string, BigNumber],
  InsuranceDepositedEventObject
>;

export type InsuranceDepositedEventFilter =
  TypedEventFilter<InsuranceDepositedEvent>;

export interface InsuranceWithdrawnEventObject {
  caller: string;
  to: string;
  amount: BigNumber;
}
export type InsuranceWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  InsuranceWithdrawnEventObject
>;

export type InsuranceWithdrawnEventFilter =
  TypedEventFilter<InsuranceWithdrawnEvent>;

export interface LongOpenedEventObject {
  amount: BigNumber;
  collateral: string;
}
export type LongOpenedEvent = TypedEvent<
  [BigNumber, string],
  LongOpenedEventObject
>;

export type LongOpenedEventFilter = TypedEventFilter<LongOpenedEvent>;

export interface ShortOpenedEventObject {
  amount: BigNumber;
  collateral: string;
}
export type ShortOpenedEvent = TypedEvent<
  [BigNumber, string],
  ShortOpenedEventObject
>;

export type ShortOpenedEventFilter = TypedEventFilter<ShortOpenedEvent>;

export interface TestDepository extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestDepositoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assetToken(overrides?: CallOverrides): Promise<[string]>;

    collateralDeposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositInsurance(
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getExchangeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExchangeFeeWad(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPositionValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnrealizedPnl(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _futuresMarket: PromiseOrValue<string>,
      _baseToken: PromiseOrValue<string>,
      _insuranceToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insuranceDeposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    insuranceToken(overrides?: CallOverrides): Promise<[string]>;

    market(overrides?: CallOverrides): Promise<[string]>;

    processQuoteMint(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    processQuoteRedeem(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    quoteToken(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemableSoftCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemableUnderManagement(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFeesPaid(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawInsurance(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  assetToken(overrides?: CallOverrides): Promise<string>;

  collateralDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositInsurance(
    amount: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getExchangeFee(overrides?: CallOverrides): Promise<BigNumber>;

  getExchangeFeeWad(overrides?: CallOverrides): Promise<BigNumber>;

  getPositionValue(overrides?: CallOverrides): Promise<BigNumber>;

  getUnrealizedPnl(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _futuresMarket: PromiseOrValue<string>,
    _baseToken: PromiseOrValue<string>,
    _insuranceToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  insuranceDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  insuranceToken(overrides?: CallOverrides): Promise<string>;

  market(overrides?: CallOverrides): Promise<string>;

  processQuoteMint(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  processQuoteRedeem(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteToken(overrides?: CallOverrides): Promise<string>;

  redeem(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemableSoftCap(overrides?: CallOverrides): Promise<BigNumber>;

  redeemableUnderManagement(overrides?: CallOverrides): Promise<BigNumber>;

  totalFeesPaid(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawInsurance(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assetToken(overrides?: CallOverrides): Promise<string>;

    collateralDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositInsurance(
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getExchangeFee(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeFeeWad(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionValue(overrides?: CallOverrides): Promise<BigNumber>;

    getUnrealizedPnl(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _futuresMarket: PromiseOrValue<string>,
      _baseToken: PromiseOrValue<string>,
      _insuranceToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    insuranceDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    insuranceToken(overrides?: CallOverrides): Promise<string>;

    market(overrides?: CallOverrides): Promise<string>;

    processQuoteMint(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processQuoteRedeem(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteToken(overrides?: CallOverrides): Promise<string>;

    redeem(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemableSoftCap(overrides?: CallOverrides): Promise<BigNumber>;

    redeemableUnderManagement(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeesPaid(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawInsurance(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CollateralDeposited(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): CollateralDepositedEventFilter;
    CollateralDeposited(
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): CollateralDepositedEventFilter;

    "CollateralWithdrawnTo(address,uint256,address)"(
      token?: PromiseOrValue<string> | null,
      amount?: null,
      to?: PromiseOrValue<string> | null
    ): CollateralWithdrawnToEventFilter;
    CollateralWithdrawnTo(
      token?: PromiseOrValue<string> | null,
      amount?: null,
      to?: PromiseOrValue<string> | null
    ): CollateralWithdrawnToEventFilter;

    "InsuranceDeposited(address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): InsuranceDepositedEventFilter;
    InsuranceDeposited(
      caller?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): InsuranceDepositedEventFilter;

    "InsuranceWithdrawn(address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): InsuranceWithdrawnEventFilter;
    InsuranceWithdrawn(
      caller?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): InsuranceWithdrawnEventFilter;

    "LongOpened(uint256,address)"(
      amount?: null,
      collateral?: PromiseOrValue<string> | null
    ): LongOpenedEventFilter;
    LongOpened(
      amount?: null,
      collateral?: PromiseOrValue<string> | null
    ): LongOpenedEventFilter;

    "ShortOpened(uint256,address)"(
      amount?: null,
      collateral?: PromiseOrValue<string> | null
    ): ShortOpenedEventFilter;
    ShortOpened(
      amount?: null,
      collateral?: PromiseOrValue<string> | null
    ): ShortOpenedEventFilter;
  };

  estimateGas: {
    assetToken(overrides?: CallOverrides): Promise<BigNumber>;

    collateralDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositInsurance(
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getExchangeFee(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeFeeWad(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionValue(overrides?: CallOverrides): Promise<BigNumber>;

    getUnrealizedPnl(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _futuresMarket: PromiseOrValue<string>,
      _baseToken: PromiseOrValue<string>,
      _insuranceToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    insuranceDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    insuranceToken(overrides?: CallOverrides): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<BigNumber>;

    processQuoteMint(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processQuoteRedeem(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemableSoftCap(overrides?: CallOverrides): Promise<BigNumber>;

    redeemableUnderManagement(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeesPaid(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawInsurance(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralDeposited(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositInsurance(
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getExchangeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExchangeFeeWad(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPositionValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnrealizedPnl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _futuresMarket: PromiseOrValue<string>,
      _baseToken: PromiseOrValue<string>,
      _insuranceToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    insuranceDeposited(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insuranceToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    market(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processQuoteMint(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processQuoteRedeem(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemableSoftCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemableUnderManagement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFeesPaid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawInsurance(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
