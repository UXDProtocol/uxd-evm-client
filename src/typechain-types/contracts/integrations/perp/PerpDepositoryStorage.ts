/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface PerpDepositoryStorageInterface extends utils.Interface {
  functions: {
    "assetDeposited()": FunctionFragment;
    "assetToken()": FunctionFragment;
    "clearingHouse()": FunctionFragment;
    "controller()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "depositInsurance(uint256,address)": FunctionFragment;
    "getUnrealizedPnl()": FunctionFragment;
    "insuranceDeposited()": FunctionFragment;
    "insuranceToken()": FunctionFragment;
    "market()": FunctionFragment;
    "marketRegistry()": FunctionFragment;
    "quoteMinted()": FunctionFragment;
    "quoteToken()": FunctionFragment;
    "redeem(address,uint256)": FunctionFragment;
    "redeemableSoftCap()": FunctionFragment;
    "redeemableUnderManagement()": FunctionFragment;
    "spotSwapper()": FunctionFragment;
    "totalFeesPaid()": FunctionFragment;
    "vault()": FunctionFragment;
    "withdrawInsurance(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assetDeposited"
      | "assetToken"
      | "clearingHouse"
      | "controller"
      | "deposit"
      | "depositInsurance"
      | "getUnrealizedPnl"
      | "insuranceDeposited"
      | "insuranceToken"
      | "market"
      | "marketRegistry"
      | "quoteMinted"
      | "quoteToken"
      | "redeem"
      | "redeemableSoftCap"
      | "redeemableUnderManagement"
      | "spotSwapper"
      | "totalFeesPaid"
      | "vault"
      | "withdrawInsurance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assetDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clearingHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositInsurance",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnrealizedPnl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemableSoftCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemableUnderManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spotSwapper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeesPaid",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawInsurance",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "assetDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearingHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositInsurance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnrealizedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insuranceDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insuranceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemableSoftCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemableUnderManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spotSwapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeesPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInsurance",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PerpDepositoryStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PerpDepositoryStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assetDeposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    assetToken(overrides?: CallOverrides): Promise<[string]>;

    clearingHouse(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositInsurance(
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getUnrealizedPnl(overrides?: CallOverrides): Promise<[BigNumber]>;

    insuranceDeposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    insuranceToken(overrides?: CallOverrides): Promise<[string]>;

    market(overrides?: CallOverrides): Promise<[string]>;

    marketRegistry(overrides?: CallOverrides): Promise<[string]>;

    quoteMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    quoteToken(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      token: PromiseOrValue<string>,
      amountToRedeem: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemableSoftCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemableUnderManagement(overrides?: CallOverrides): Promise<[BigNumber]>;

    spotSwapper(overrides?: CallOverrides): Promise<[string]>;

    totalFeesPaid(overrides?: CallOverrides): Promise<[BigNumber]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    withdrawInsurance(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  assetDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  assetToken(overrides?: CallOverrides): Promise<string>;

  clearingHouse(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  deposit(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositInsurance(
    amount: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getUnrealizedPnl(overrides?: CallOverrides): Promise<BigNumber>;

  insuranceDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  insuranceToken(overrides?: CallOverrides): Promise<string>;

  market(overrides?: CallOverrides): Promise<string>;

  marketRegistry(overrides?: CallOverrides): Promise<string>;

  quoteMinted(overrides?: CallOverrides): Promise<BigNumber>;

  quoteToken(overrides?: CallOverrides): Promise<string>;

  redeem(
    token: PromiseOrValue<string>,
    amountToRedeem: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemableSoftCap(overrides?: CallOverrides): Promise<BigNumber>;

  redeemableUnderManagement(overrides?: CallOverrides): Promise<BigNumber>;

  spotSwapper(overrides?: CallOverrides): Promise<string>;

  totalFeesPaid(overrides?: CallOverrides): Promise<BigNumber>;

  vault(overrides?: CallOverrides): Promise<string>;

  withdrawInsurance(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assetDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    assetToken(overrides?: CallOverrides): Promise<string>;

    clearingHouse(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositInsurance(
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getUnrealizedPnl(overrides?: CallOverrides): Promise<BigNumber>;

    insuranceDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    insuranceToken(overrides?: CallOverrides): Promise<string>;

    market(overrides?: CallOverrides): Promise<string>;

    marketRegistry(overrides?: CallOverrides): Promise<string>;

    quoteMinted(overrides?: CallOverrides): Promise<BigNumber>;

    quoteToken(overrides?: CallOverrides): Promise<string>;

    redeem(
      token: PromiseOrValue<string>,
      amountToRedeem: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemableSoftCap(overrides?: CallOverrides): Promise<BigNumber>;

    redeemableUnderManagement(overrides?: CallOverrides): Promise<BigNumber>;

    spotSwapper(overrides?: CallOverrides): Promise<string>;

    totalFeesPaid(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<string>;

    withdrawInsurance(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    assetDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    assetToken(overrides?: CallOverrides): Promise<BigNumber>;

    clearingHouse(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositInsurance(
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getUnrealizedPnl(overrides?: CallOverrides): Promise<BigNumber>;

    insuranceDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    insuranceToken(overrides?: CallOverrides): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<BigNumber>;

    marketRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    quoteMinted(overrides?: CallOverrides): Promise<BigNumber>;

    quoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      token: PromiseOrValue<string>,
      amountToRedeem: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemableSoftCap(overrides?: CallOverrides): Promise<BigNumber>;

    redeemableUnderManagement(overrides?: CallOverrides): Promise<BigNumber>;

    spotSwapper(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeesPaid(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawInsurance(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetDeposited(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositInsurance(
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getUnrealizedPnl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    insuranceDeposited(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insuranceToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    market(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      token: PromiseOrValue<string>,
      amountToRedeem: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemableSoftCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemableUnderManagement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spotSwapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFeesPaid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawInsurance(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
