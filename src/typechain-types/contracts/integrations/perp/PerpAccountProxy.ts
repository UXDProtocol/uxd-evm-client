/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace AccountMarket {
  export type InfoStruct = {
    takerPositionSize: PromiseOrValue<BigNumberish>;
    takerOpenNotional: PromiseOrValue<BigNumberish>;
    lastTwPremiumGrowthGlobalX96: PromiseOrValue<BigNumberish>;
  };

  export type InfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    takerPositionSize: BigNumber;
    takerOpenNotional: BigNumber;
    lastTwPremiumGrowthGlobalX96: BigNumber;
  };
}

export interface PerpAccountProxyInterface extends utils.Interface {
  functions: {
    "getAccountInfo(address,address)": FunctionFragment;
    "getAccountValue(address)": FunctionFragment;
    "getBalanceByToken(address,address)": FunctionFragment;
    "getFreeCollateral(address)": FunctionFragment;
    "getFreeCollateralByRatio(address,uint24)": FunctionFragment;
    "getFreeCollateralByToken(address,address)": FunctionFragment;
    "getPnlAndPendingFee(address)": FunctionFragment;
    "getTotalAbsPositionValue(address)": FunctionFragment;
    "getTotalDebtValue(address)": FunctionFragment;
    "getTotalOpenNotional(address,address)": FunctionFragment;
    "getTotalPositionSize(address,address)": FunctionFragment;
    "getTotalPositionValue(address,address)": FunctionFragment;
    "perpAccount()": FunctionFragment;
    "perpClearingHouse()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAccountInfo"
      | "getAccountValue"
      | "getBalanceByToken"
      | "getFreeCollateral"
      | "getFreeCollateralByRatio"
      | "getFreeCollateralByToken"
      | "getPnlAndPendingFee"
      | "getTotalAbsPositionValue"
      | "getTotalDebtValue"
      | "getTotalOpenNotional"
      | "getTotalPositionSize"
      | "getTotalPositionValue"
      | "perpAccount"
      | "perpClearingHouse"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceByToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFreeCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFreeCollateralByRatio",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFreeCollateralByToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPnlAndPendingFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAbsPositionValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebtValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalOpenNotional",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPositionSize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPositionValue",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "perpAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "perpClearingHouse",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreeCollateralByRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreeCollateralByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPnlAndPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAbsPositionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebtValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalOpenNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPositionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "perpAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "perpClearingHouse",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PerpAccountProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PerpAccountProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountInfo(
      account: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[AccountMarket.InfoStructOutput]>;

    getAccountValue(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBalanceByToken(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFreeCollateral(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFreeCollateralByRatio(
      account: PromiseOrValue<string>,
      ratio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFreeCollateralByToken(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPnlAndPendingFee(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getTotalAbsPositionValue(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalDebtValue(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalOpenNotional(
      account: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalPositionSize(
      account: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalPositionValue(
      account: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    perpAccount(overrides?: CallOverrides): Promise<[string]>;

    perpClearingHouse(overrides?: CallOverrides): Promise<[string]>;
  };

  getAccountInfo(
    account: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AccountMarket.InfoStructOutput>;

  getAccountValue(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalanceByToken(
    account: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFreeCollateral(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFreeCollateralByRatio(
    account: PromiseOrValue<string>,
    ratio: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFreeCollateralByToken(
    account: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPnlAndPendingFee(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getTotalAbsPositionValue(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDebtValue(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalOpenNotional(
    account: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalPositionSize(
    account: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalPositionValue(
    account: PromiseOrValue<string>,
    baseToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  perpAccount(overrides?: CallOverrides): Promise<string>;

  perpClearingHouse(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getAccountInfo(
      account: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AccountMarket.InfoStructOutput>;

    getAccountValue(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalanceByToken(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeCollateral(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeCollateralByRatio(
      account: PromiseOrValue<string>,
      ratio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeCollateralByToken(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPnlAndPendingFee(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getTotalAbsPositionValue(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebtValue(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOpenNotional(
      account: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionSize(
      account: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionValue(
      account: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    perpAccount(overrides?: CallOverrides): Promise<string>;

    perpClearingHouse(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getAccountInfo(
      account: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountValue(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalanceByToken(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeCollateral(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeCollateralByRatio(
      account: PromiseOrValue<string>,
      ratio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeCollateralByToken(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPnlAndPendingFee(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAbsPositionValue(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebtValue(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOpenNotional(
      account: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionSize(
      account: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionValue(
      account: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    perpAccount(overrides?: CallOverrides): Promise<BigNumber>;

    perpClearingHouse(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountInfo(
      account: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountValue(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalanceByToken(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFreeCollateral(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFreeCollateralByRatio(
      account: PromiseOrValue<string>,
      ratio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFreeCollateralByToken(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPnlAndPendingFee(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAbsPositionValue(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDebtValue(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalOpenNotional(
      account: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPositionSize(
      account: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPositionValue(
      account: PromiseOrValue<string>,
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    perpAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perpClearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
