/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockPerpAccountBalance,
  MockPerpAccountBalanceInterface,
} from "../../../contracts/test/MockPerpAccountBalance";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getTotalAbsPositionValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "getTotalOpenNotional",
    outputs: [
      {
        internalType: "int256",
        name: "totalOpenNotional",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        internalType: "int256",
        name: "value",
        type: "int256",
      },
    ],
    name: "setOpenNotional",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "positionValue",
        type: "uint256",
      },
    ],
    name: "setPositionValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061021f806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063078b2853146100515780636ccdc82e146100985780639b63600c146100bf578063b3945690146100d2575b600080fd5b61009661005f36600461013f565b73ffffffffffffffffffffffffffffffffffffffff9283166000908152602081815260408083209490951682529290925291902055565b005b6100ad6100a636600461017b565b5060015490565b60405190815260200160405180910390f35b6100966100cd36600461019d565b600155565b6100ad6100e03660046101b6565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526020818152604080832093909416825291909152205490565b803573ffffffffffffffffffffffffffffffffffffffff8116811461013a57600080fd5b919050565b60008060006060848603121561015457600080fd5b61015d84610116565b925061016b60208501610116565b9150604084013590509250925092565b60006020828403121561018d57600080fd5b61019682610116565b9392505050565b6000602082840312156101af57600080fd5b5035919050565b600080604083850312156101c957600080fd5b6101d283610116565b91506101e060208401610116565b9050925092905056fea26469706673582212207a8a930ce5fa270a250864627855bfe49156ce3175c7073541bb03a565b9f07164736f6c63430008110033";

type MockPerpAccountBalanceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPerpAccountBalanceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPerpAccountBalance__factory extends ContractFactory {
  constructor(...args: MockPerpAccountBalanceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockPerpAccountBalance> {
    return super.deploy(overrides || {}) as Promise<MockPerpAccountBalance>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockPerpAccountBalance {
    return super.attach(address) as MockPerpAccountBalance;
  }
  override connect(signer: Signer): MockPerpAccountBalance__factory {
    return super.connect(signer) as MockPerpAccountBalance__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPerpAccountBalanceInterface {
    return new utils.Interface(_abi) as MockPerpAccountBalanceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockPerpAccountBalance {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockPerpAccountBalance;
  }
}
