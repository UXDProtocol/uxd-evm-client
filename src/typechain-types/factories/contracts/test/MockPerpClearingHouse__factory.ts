/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockPerpClearingHouse,
  MockPerpClearingHouseInterface,
} from "../../../contracts/test/MockPerpClearingHouse";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "baseToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isBaseToQuote",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isExactInput",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "oppositeAmountBound",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint160",
        name: "sqrtPriceLimitX96",
        type: "uint160",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "referralCode",
        type: "bytes32",
      },
    ],
    name: "OpenPositionCalled",
    type: "event",
  },
  {
    inputs: [],
    name: "getAccountBalance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "multiplier",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "baseToken",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isBaseToQuote",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isExactInput",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "oppositeAmountBound",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
          {
            internalType: "bytes32",
            name: "referralCode",
            type: "bytes32",
          },
        ],
        internalType: "struct IClearingHouse.OpenPositionParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "openPosition",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "balanceContract",
        type: "address",
      },
    ],
    name: "setAccountBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052606460015534801561001557600080fd5b5061039e806100256000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063199387cc146100515780631b3ed722146100a85780636896fabf146100c4578063b6b1b6c3146100ec575b600080fd5b6100a661005f36600461021d565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b6100b160015481565b6040519081526020015b60405180910390f35b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100bb565b6100ff6100fa366004610251565b610114565b604080519283526020830191909152016100bb565b6000807feaaf466916e36649932f768f3fca4649aa020dd3b0ddfdea63a3b757ca44520c836000015184602001518560400151866060015187608001518860a001518960c001518a60e001516040516101c598979695949392919073ffffffffffffffffffffffffffffffffffffffff9889168152961515602088015294151560408701526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b60405180910390a160608301516001546101df9082610324565b91509150915091565b73ffffffffffffffffffffffffffffffffffffffff8116811461020a57600080fd5b50565b8035610218816101e8565b919050565b60006020828403121561022f57600080fd5b813561023a816101e8565b9392505050565b8035801515811461021857600080fd5b600061010080838503121561026557600080fd5b6040519081019067ffffffffffffffff821181831017156102af577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b816040526102bc8461020d565b81526102ca60208501610241565b60208201526102db60408501610241565b6040820152606084013560608201526080840135608082015260a084013560a082015261030a60c0850161020d565b60c082015260e084013560e0820152809250505092915050565b8082028115828204841417610362577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212203506bf227daeb8cbce245d63ed431b30ae3c27f563988f052059d0bb6ac08f0f64736f6c63430008110033";

type MockPerpClearingHouseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPerpClearingHouseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPerpClearingHouse__factory extends ContractFactory {
  constructor(...args: MockPerpClearingHouseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockPerpClearingHouse> {
    return super.deploy(overrides || {}) as Promise<MockPerpClearingHouse>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockPerpClearingHouse {
    return super.attach(address) as MockPerpClearingHouse;
  }
  override connect(signer: Signer): MockPerpClearingHouse__factory {
    return super.connect(signer) as MockPerpClearingHouse__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPerpClearingHouseInterface {
    return new utils.Interface(_abi) as MockPerpClearingHouseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockPerpClearingHouse {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockPerpClearingHouse;
  }
}
