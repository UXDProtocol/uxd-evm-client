/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockPerpVault,
  MockPerpVaultInterface,
} from "../../../contracts/test/MockPerpVault";

const _abi = [
  {
    anonymous: false,
    inputs: [],
    name: "DepositCalled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610203806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806347e7ef241461003b578063f3fef3a314610050575b600080fd5b61004e61004936600461015f565b610063565b005b61004e61005e36600461015f565b610106565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810182905273ffffffffffffffffffffffffffffffffffffffff8316906323b872dd906064015b6020604051808303816000875af11580156100dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010191906101a4565b505050565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810182905273ffffffffffffffffffffffffffffffffffffffff83169063a9059cbb906044016100be565b6000806040838503121561017257600080fd5b823573ffffffffffffffffffffffffffffffffffffffff8116811461019657600080fd5b946020939093013593505050565b6000602082840312156101b657600080fd5b815180151581146101c657600080fd5b939250505056fea26469706673582212207278bdd75fd3e7a87294634b2396e1140ae89ebf7c39828b59f8061e88d7184e64736f6c63430008110033";

type MockPerpVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPerpVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPerpVault__factory extends ContractFactory {
  constructor(...args: MockPerpVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockPerpVault> {
    return super.deploy(overrides || {}) as Promise<MockPerpVault>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockPerpVault {
    return super.attach(address) as MockPerpVault;
  }
  override connect(signer: Signer): MockPerpVault__factory {
    return super.connect(signer) as MockPerpVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPerpVaultInterface {
    return new utils.Interface(_abi) as MockPerpVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockPerpVault {
    return new Contract(address, _abi, signerOrProvider) as MockPerpVault;
  }
}
