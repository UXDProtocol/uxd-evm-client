/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "GovernorCountingSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorCountingSimple__factory>;
    getContractFactory(
      name: "GovernorSettings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorSettings__factory>;
    getContractFactory(
      name: "GovernorTimelockControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorTimelockControl__factory>;
    getContractFactory(
      name: "GovernorVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorVotes__factory>;
    getContractFactory(
      name: "GovernorVotesQuorumFraction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorVotesQuorumFraction__factory>;
    getContractFactory(
      name: "IGovernorTimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernorTimelock__factory>;
    getContractFactory(
      name: "Governor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governor__factory>;
    getContractFactory(
      name: "IGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernor__factory>;
    getContractFactory(
      name: "TimelockController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimelockController__factory>;
    getContractFactory(
      name: "IVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotes__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "ERC20Votes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Votes__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "DoubleEndedQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DoubleEndedQueue__factory>;
    getContractFactory(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "IUXDController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUXDController__factory>;
    getContractFactory(
      name: "IUXDRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUXDRouter__factory>;
    getContractFactory(
      name: "UXDController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UXDController__factory>;
    getContractFactory(
      name: "UXDControllerStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UXDControllerStorage__factory>;
    getContractFactory(
      name: "UXDRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UXDRouter__factory>;
    getContractFactory(
      name: "IRedeemable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRedeemable__factory>;
    getContractFactory(
      name: "UXDToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UXDToken__factory>;
    getContractFactory(
      name: "IAccountBalance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccountBalance__factory>;
    getContractFactory(
      name: "IClearingHouse",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClearingHouse__factory>;
    getContractFactory(
      name: "IExchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExchange__factory>;
    getContractFactory(
      name: "IMarketRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarketRegistry__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "IBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBorrower__factory>;
    getContractFactory(
      name: "IDnGmxSeniorVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDnGmxSeniorVault__factory>;
    getContractFactory(
      name: "IERC4626",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4626__factory>;
    getContractFactory(
      name: "IWETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH9__factory>;
    getContractFactory(
      name: "UXDCouncilToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UXDCouncilToken__factory>;
    getContractFactory(
      name: "UXDGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UXDGovernor__factory>;
    getContractFactory(
      name: "UXDTimelockController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UXDTimelockController__factory>;
    getContractFactory(
      name: "UXPToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UXPToken__factory>;
    getContractFactory(
      name: "IDepository",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDepository__factory>;
    getContractFactory(
      name: "ISwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapper__factory>;
    getContractFactory(
      name: "PerpAccountProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpAccountProxy__factory>;
    getContractFactory(
      name: "PerpDepository",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpDepository__factory>;
    getContractFactory(
      name: "PerpDepositoryStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpDepositoryStorage__factory>;
    getContractFactory(
      name: "RageDnDepository",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RageDnDepository__factory>;
    getContractFactory(
      name: "Uniswapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Uniswapper__factory>;
    getContractFactory(
      name: "MockController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockController__factory>;
    getContractFactory(
      name: "MockPerpAccountBalance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPerpAccountBalance__factory>;
    getContractFactory(
      name: "MockPerpClearingHouse",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPerpClearingHouse__factory>;
    getContractFactory(
      name: "MockPerpMarketRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPerpMarketRegistry__factory>;
    getContractFactory(
      name: "MockPerpVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPerpVault__factory>;
    getContractFactory(
      name: "TestDepository",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestDepository__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "TestPerpDepository",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestPerpDepository__factory>;
    getContractFactory(
      name: "TestPerpDepositoryUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestPerpDepositoryUpgrade__factory>;
    getContractFactory(
      name: "TestUXDControllerUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestUXDControllerUpgrade__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "GovernorCountingSimple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorCountingSimple>;
    getContractAt(
      name: "GovernorSettings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorSettings>;
    getContractAt(
      name: "GovernorTimelockControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorTimelockControl>;
    getContractAt(
      name: "GovernorVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorVotes>;
    getContractAt(
      name: "GovernorVotesQuorumFraction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorVotesQuorumFraction>;
    getContractAt(
      name: "IGovernorTimelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernorTimelock>;
    getContractAt(
      name: "Governor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Governor>;
    getContractAt(
      name: "IGovernor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernor>;
    getContractAt(
      name: "TimelockController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimelockController>;
    getContractAt(
      name: "IVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotes>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "ERC20Votes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Votes>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "DoubleEndedQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DoubleEndedQueue>;
    getContractAt(
      name: "IUniswapV3SwapCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    getContractAt(
      name: "ISwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "IUXDController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUXDController>;
    getContractAt(
      name: "IUXDRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUXDRouter>;
    getContractAt(
      name: "UXDController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UXDController>;
    getContractAt(
      name: "UXDControllerStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UXDControllerStorage>;
    getContractAt(
      name: "UXDRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UXDRouter>;
    getContractAt(
      name: "IRedeemable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRedeemable>;
    getContractAt(
      name: "UXDToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UXDToken>;
    getContractAt(
      name: "IAccountBalance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccountBalance>;
    getContractAt(
      name: "IClearingHouse",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClearingHouse>;
    getContractAt(
      name: "IExchange",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExchange>;
    getContractAt(
      name: "IMarketRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarketRegistry>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "IBorrower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBorrower>;
    getContractAt(
      name: "IDnGmxSeniorVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDnGmxSeniorVault>;
    getContractAt(
      name: "IERC4626",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC4626>;
    getContractAt(
      name: "IWETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH9>;
    getContractAt(
      name: "UXDCouncilToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UXDCouncilToken>;
    getContractAt(
      name: "UXDGovernor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UXDGovernor>;
    getContractAt(
      name: "UXDTimelockController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UXDTimelockController>;
    getContractAt(
      name: "UXPToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UXPToken>;
    getContractAt(
      name: "IDepository",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDepository>;
    getContractAt(
      name: "ISwapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapper>;
    getContractAt(
      name: "PerpAccountProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpAccountProxy>;
    getContractAt(
      name: "PerpDepository",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpDepository>;
    getContractAt(
      name: "PerpDepositoryStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpDepositoryStorage>;
    getContractAt(
      name: "RageDnDepository",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RageDnDepository>;
    getContractAt(
      name: "Uniswapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Uniswapper>;
    getContractAt(
      name: "MockController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockController>;
    getContractAt(
      name: "MockPerpAccountBalance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPerpAccountBalance>;
    getContractAt(
      name: "MockPerpClearingHouse",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPerpClearingHouse>;
    getContractAt(
      name: "MockPerpMarketRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPerpMarketRegistry>;
    getContractAt(
      name: "MockPerpVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPerpVault>;
    getContractAt(
      name: "TestDepository",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestDepository>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "TestPerpDepository",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestPerpDepository>;
    getContractAt(
      name: "TestPerpDepositoryUpgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestPerpDepositoryUpgrade>;
    getContractAt(
      name: "TestUXDControllerUpgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestUXDControllerUpgrade>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
