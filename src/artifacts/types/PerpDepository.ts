/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type DepositoryStateStruct = {
  collateralDeposited: PromiseOrValue<BigNumberish>;
  insuranceDeposited: PromiseOrValue<BigNumberish>;
  redeemableAmountPending: PromiseOrValue<BigNumberish>;
  totalFeesPaid: PromiseOrValue<BigNumberish>;
  redeemableSoftCap: PromiseOrValue<BigNumberish>;
};

export type DepositoryStateStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  collateralDeposited: BigNumber;
  insuranceDeposited: BigNumber;
  redeemableAmountPending: BigNumber;
  totalFeesPaid: BigNumber;
  redeemableSoftCap: BigNumber;
};

export type LongPositionParamsStruct = {
  amountToRedeem: PromiseOrValue<BigNumberish>;
  collateralToken: PromiseOrValue<string>;
  sqrtPriceLimitX96: PromiseOrValue<BigNumberish>;
  user: PromiseOrValue<string>;
};

export type LongPositionParamsStructOutput = [
  BigNumber,
  string,
  BigNumber,
  string
] & {
  amountToRedeem: BigNumber;
  collateralToken: string;
  sqrtPriceLimitX96: BigNumber;
  user: string;
};

export type ShortPositionParamsStruct = {
  amount: PromiseOrValue<BigNumberish>;
  collateralToken: PromiseOrValue<string>;
  sqrtPriceLimitX96: PromiseOrValue<BigNumberish>;
};

export type ShortPositionParamsStructOutput = [BigNumber, string, BigNumber] & {
  amount: BigNumber;
  collateralToken: string;
  sqrtPriceLimitX96: BigNumber;
};

export interface PerpDepositoryInterface extends utils.Interface {
  functions: {
    "HUNDRED_PERCENT()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "clearingHouse()": FunctionFragment;
    "collateralDeposited()": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "depositCollateral(uint256)": FunctionFragment;
    "depositInsurance(uint256,address)": FunctionFragment;
    "exchangeFee()": FunctionFragment;
    "exchangeFeeWad()": FunctionFragment;
    "getAccountValue(address)": FunctionFragment;
    "getCurrentState()": FunctionFragment;
    "getFreeCollateral()": FunctionFragment;
    "initialize(address,address,address,address,address,address,address)": FunctionFragment;
    "insuranceDeposited()": FunctionFragment;
    "insuranceToken()": FunctionFragment;
    "market()": FunctionFragment;
    "marketRegistry()": FunctionFragment;
    "openLong((uint256,address,uint160,address))": FunctionFragment;
    "openShort((uint256,address,uint160))": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "redeemableAmountPending()": FunctionFragment;
    "redeemableSoftCap()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "setRedeemableSoftCap(uint256)": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "totalFeesPaid()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "vault()": FunctionFragment;
    "withdrawCollateral(uint256,address)": FunctionFragment;
    "withdrawInsurance(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "HUNDRED_PERCENT"
      | "VERSION"
      | "clearingHouse"
      | "collateralDeposited"
      | "collateralToken"
      | "depositCollateral"
      | "depositInsurance"
      | "exchangeFee"
      | "exchangeFeeWad"
      | "getAccountValue"
      | "getCurrentState"
      | "getFreeCollateral"
      | "initialize"
      | "insuranceDeposited"
      | "insuranceToken"
      | "market"
      | "marketRegistry"
      | "openLong"
      | "openShort"
      | "owner"
      | "proxiableUUID"
      | "redeemableAmountPending"
      | "redeemableSoftCap"
      | "renounceOwnership"
      | "router"
      | "setRedeemableSoftCap"
      | "setRouter"
      | "totalFeesPaid"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "vault"
      | "withdrawCollateral"
      | "withdrawInsurance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "HUNDRED_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "clearingHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositInsurance",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeFeeWad",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFreeCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openLong",
    values: [LongPositionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "openShort",
    values: [ShortPositionParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemableAmountPending",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemableSoftCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRedeemableSoftCap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeesPaid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawInsurance",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "HUNDRED_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearingHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositInsurance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFeeWad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insuranceDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insuranceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openLong", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openShort", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemableAmountPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemableSoftCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRedeemableSoftCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalFeesPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInsurance",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "InsuranceDeposited(address,address,uint256)": EventFragment;
    "InsuranceWithdrawn(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RedeemableSoftCapUpdated(address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsuranceDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsuranceWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemableSoftCapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InsuranceDepositedEventObject {
  caller: string;
  from: string;
  amount: BigNumber;
}
export type InsuranceDepositedEvent = TypedEvent<
  [string, string, BigNumber],
  InsuranceDepositedEventObject
>;

export type InsuranceDepositedEventFilter =
  TypedEventFilter<InsuranceDepositedEvent>;

export interface InsuranceWithdrawnEventObject {
  caller: string;
  to: string;
  amount: BigNumber;
}
export type InsuranceWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  InsuranceWithdrawnEventObject
>;

export type InsuranceWithdrawnEventFilter =
  TypedEventFilter<InsuranceWithdrawnEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RedeemableSoftCapUpdatedEventObject {
  caller: string;
  newSoftCap: BigNumber;
}
export type RedeemableSoftCapUpdatedEvent = TypedEvent<
  [string, BigNumber],
  RedeemableSoftCapUpdatedEventObject
>;

export type RedeemableSoftCapUpdatedEventFilter =
  TypedEventFilter<RedeemableSoftCapUpdatedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface PerpDepository extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PerpDepositoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    clearingHouse(overrides?: CallOverrides): Promise<[string]>;

    collateralDeposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    depositCollateral(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositInsurance(
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeFeeWad(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountValue(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentState(
      overrides?: CallOverrides
    ): Promise<[DepositoryStateStructOutput]>;

    getFreeCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _vault: PromiseOrValue<string>,
      _clearingHouse: PromiseOrValue<string>,
      _marketRegistry: PromiseOrValue<string>,
      _futuresMarket: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _insuranceToken: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insuranceDeposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    insuranceToken(overrides?: CallOverrides): Promise<[string]>;

    market(overrides?: CallOverrides): Promise<[string]>;

    marketRegistry(overrides?: CallOverrides): Promise<[string]>;

    openLong(
      params: LongPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openShort(
      params: ShortPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    redeemableAmountPending(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemableSoftCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setRedeemableSoftCap(
      softCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalFeesPaid(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    withdrawCollateral(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawInsurance(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  clearingHouse(overrides?: CallOverrides): Promise<string>;

  collateralDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  depositCollateral(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositInsurance(
    amount: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangeFee(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeFeeWad(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountValue(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentState(
    overrides?: CallOverrides
  ): Promise<DepositoryStateStructOutput>;

  getFreeCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _vault: PromiseOrValue<string>,
    _clearingHouse: PromiseOrValue<string>,
    _marketRegistry: PromiseOrValue<string>,
    _futuresMarket: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _insuranceToken: PromiseOrValue<string>,
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  insuranceDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  insuranceToken(overrides?: CallOverrides): Promise<string>;

  market(overrides?: CallOverrides): Promise<string>;

  marketRegistry(overrides?: CallOverrides): Promise<string>;

  openLong(
    params: LongPositionParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openShort(
    params: ShortPositionParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  redeemableAmountPending(overrides?: CallOverrides): Promise<BigNumber>;

  redeemableSoftCap(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setRedeemableSoftCap(
    softCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRouter(
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalFeesPaid(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  withdrawCollateral(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawInsurance(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    clearingHouse(overrides?: CallOverrides): Promise<string>;

    collateralDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    depositCollateral(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositInsurance(
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeFee(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeFeeWad(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountValue(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentState(
      overrides?: CallOverrides
    ): Promise<DepositoryStateStructOutput>;

    getFreeCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _vault: PromiseOrValue<string>,
      _clearingHouse: PromiseOrValue<string>,
      _marketRegistry: PromiseOrValue<string>,
      _futuresMarket: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _insuranceToken: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    insuranceDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    insuranceToken(overrides?: CallOverrides): Promise<string>;

    market(overrides?: CallOverrides): Promise<string>;

    marketRegistry(overrides?: CallOverrides): Promise<string>;

    openLong(
      params: LongPositionParamsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    openShort(
      params: ShortPositionParamsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    redeemableAmountPending(overrides?: CallOverrides): Promise<BigNumber>;

    redeemableSoftCap(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    setRedeemableSoftCap(
      softCap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouter(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalFeesPaid(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    withdrawCollateral(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawInsurance(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "InsuranceDeposited(address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): InsuranceDepositedEventFilter;
    InsuranceDeposited(
      caller?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): InsuranceDepositedEventFilter;

    "InsuranceWithdrawn(address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): InsuranceWithdrawnEventFilter;
    InsuranceWithdrawn(
      caller?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): InsuranceWithdrawnEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RedeemableSoftCapUpdated(address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      newSoftCap?: null
    ): RedeemableSoftCapUpdatedEventFilter;
    RedeemableSoftCapUpdated(
      caller?: PromiseOrValue<string> | null,
      newSoftCap?: null
    ): RedeemableSoftCapUpdatedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    clearingHouse(overrides?: CallOverrides): Promise<BigNumber>;

    collateralDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    depositCollateral(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositInsurance(
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangeFee(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeFeeWad(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountValue(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentState(overrides?: CallOverrides): Promise<BigNumber>;

    getFreeCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _vault: PromiseOrValue<string>,
      _clearingHouse: PromiseOrValue<string>,
      _marketRegistry: PromiseOrValue<string>,
      _futuresMarket: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _insuranceToken: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    insuranceDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    insuranceToken(overrides?: CallOverrides): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<BigNumber>;

    marketRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    openLong(
      params: LongPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openShort(
      params: ShortPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    redeemableAmountPending(overrides?: CallOverrides): Promise<BigNumber>;

    redeemableSoftCap(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setRedeemableSoftCap(
      softCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalFeesPaid(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCollateral(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawInsurance(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralDeposited(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositCollateral(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositInsurance(
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeFeeWad(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountValue(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFreeCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _vault: PromiseOrValue<string>,
      _clearingHouse: PromiseOrValue<string>,
      _marketRegistry: PromiseOrValue<string>,
      _futuresMarket: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _insuranceToken: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    insuranceDeposited(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insuranceToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    market(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openLong(
      params: LongPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openShort(
      params: ShortPositionParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemableAmountPending(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemableSoftCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRedeemableSoftCap(
      softCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalFeesPaid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawCollateral(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawInsurance(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
